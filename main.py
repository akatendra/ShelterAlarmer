"""
–ß—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª getpass() –ø—É—Å–∫–∞—Ç—å –∏–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –∫–æ–º–∞–Ω–¥–æ–π:
python main.py

 –î–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã, –≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã:
 –ö–û–†–ê–ë–ï–õ–ò ‚Äî ID: -1002123586827

 –ü–ù | –ü—Ä–µ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏.–ù–ï–¢ ‚Äî ID: -1001144849043
################################################################################
 –í–∞—Ä–∏–∞–Ω—Ç 1: –ü—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ PowerShell

–û—Ç–∫—Ä–æ–π PowerShell (Windows + R ‚Üí powershell) –∏ –±–∞—Ö–Ω–∏:

python "G:\Python_projects\Shelter_Alarmer\main.py"

–ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç:

    –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –∏ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –ø–æ–∫–∞ –æ–∫–Ω–æ –Ω–µ –∑–∞–∫—Ä–æ–µ—à—å –∏–ª–∏ –Ω–µ —Å–ª–æ–≤–∏—à—å –æ—à–∏–±–∫—É/–≤—ã–ª–µ—Ç.

 –í–∞—Ä–∏–∞–Ω—Ç 2: –ó–∞–ø—É—Å–∫ —Å –ª–æ–≥–æ–º –∏ —Ñ–æ–Ω–æ–≤—ã–º —Ä–µ–∂–∏–º–æ–º

–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—É—Å—Ç–∏—Ç—å –≤ —Ñ–æ–Ω–µ –∏ –≤–∏–¥–µ—Ç—å –ª–æ–≥–∏, —Ç–æ –¥–µ–ª–∞–µ–º —Ç–∞–∫:

Start-Process powershell -ArgumentList "python 'G:\Python_projects\Shelter_Alarmer\main.py'" -NoNewWindow

–ò–ª–∏ –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–∏—Å–∞—Ç—å –≤—Å—ë –≤ –ª–æ–≥:

python "G:\Python_projects\Shelter_Alarmer\main.py" > G:\Python_projects\Shelter_Alarmer\output.log 2>&1

 –í–∞—Ä–∏–∞–Ω—Ç 3: –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–∏—Å—Ç–µ–º—ã (–ø–æ-–≤–∑—Ä–æ—Å–ª–æ–º—É)

    –°–æ–∑–¥–∞–π .bat —Ñ–∞–π–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä run_trivoga.bat:

@echo off
python "G:\Python_projects\Shelter_Alarmer\main.py"

    –ö–∏–Ω—å –µ–≥–æ –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É:

shell:startup

(–¥–∞, –ø—Ä—è–º–æ –≤—Å—Ç–∞–≤—å –≤ –∞–¥—Ä–µ—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É –ü—Ä–æ–≤–æ–¥–Ω–∏–∫–∞)
 –ü–æ–¥—Å–∫–∞–∑–∫–∞:

–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞–∫—Ä—ã—Ç—å —Å–∫—Ä–∏–ø—Ç ‚Äî –≤ PowerShell –∂–º–∏ Ctrl+C.
–ù–æ –µ—Å–ª–∏ –≤—Å—ë –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ñ–æ–Ω–µ, –ø—Ä–∏–¥—ë—Ç—Å—è —É–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å python.exe ‚Äî —Ä—É–∫–∞–º–∏ –∏–ª–∏ —á–µ—Ä–µ–∑ Task Manager.

################################################################################
 –ö–∞–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ (—Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫)
1. –ü–æ–¥–∫–ª—é—á–∏—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É:

ssh root@IP_–°–ï–†–í–ï–†–ê

2. –ü–µ—Ä–µ–π–¥–∏ –≤ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞:

cd /opt/zavodskij_alarmer

3. –ê–∫—Ç–∏–≤–∏—Ä—É–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ:

source venv/bin/activate

–¢–µ—Ä–º–∏–Ω–∞–ª —Å—Ç–∞–Ω–µ—Ç —Ç–∞–∫–∏–º:

(venv) root@yourserver:/opt/zavodskij_alarmer#

4. –ó–∞–ø—É—Å—Ç–∏ —Å–∫—Ä–∏–ø—Ç:

python main.py

5. –ü—Ä–æ—Å—Ç–æ –≤—ã–π–¥–∏ –∏–∑ venv, –µ—Å–ª–∏ —Ç—ã –≤ –Ω—ë–º:
deactivate
################################################################################
 –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –∫–æ–º–∞–Ω–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ —Ñ–æ–Ω–µ –±–µ–∑ –ª–æ–≥–æ–≤:

cd /opt/zavodskij_alarmer
source venv/bin/activate
nohup python main.py & disown

 –û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
–ö–æ–º–∞–Ω–¥–∞	–ß—Ç–æ –¥–µ–ª–∞–µ—Ç
cd /opt/zavodskij_alarmer	–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø–∞–ø–∫—É —Å –±–æ—Ç–æ–º
source venv/bin/activate	–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
nohup python main.py &	–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –≤ —Ñ–æ–Ω–µ, –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
disown (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ)	–û—Ç–≤—è–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∞–Ω—Å–∞ SSH (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤–æ–æ–±—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–∏—Å–∞—Ç—å –≤ —Ñ–∞–π–ª, –º–æ–∂–µ—à—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –≤ "–Ω–∏–∫—É–¥–∞":

nohup python main.py > /dev/null 2>&1 &

 –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –±–æ—Ç?

    –ü–æ—Å–º–æ—Ç—Ä–∏ —Å–ø–∏—Å–æ–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:

ps aux | grep python

–£–±–µ–¥–∏—Å—å, —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç:

    –û–Ω –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram-–≥—Ä—É–ø–ø—É?

    –ù–∏–∫–∞–∫–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ—Ç?

################################################################################
 1. –ö–∞–∫ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç–∞—é—â–∏–π –±–æ—Ç
–®–∞–≥ 1. –ù–∞–π–¥–∏ –ø—Ä–æ—Ü–µ—Å—Å:

ps aux | grep python

–¢—ã —É–≤–∏–¥–∏—à—å —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ:

root     12345  0.1  ... python main.py

–ì–¥–µ 12345 ‚Äî —ç—Ç–æ PID (–Ω–æ–º–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–∞)
–®–∞–≥ 2. –£–±–µ–π –ø—Ä–æ—Ü–µ—Å—Å:

kill 12345

–ï—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç (—Ä–µ–¥–∫–æ), –∏—Å–ø–æ–ª—å–∑—É–π –∂—ë—Å—Ç–∫–æ:

kill -9 12345

 2. –ö–∞–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å

cd /opt/zavodskij_alarmer
source venv/bin/activate
nohup python main.py > /dev/null 2>&1 &

(–ª–∏–±–æ –≤ –ª–æ–≥, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å: > log.txt 2>&1 &)
 3. –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å alias ‚Äî –∑–∞–ø—É—Å–∫ –æ–¥–Ω–æ–π –∫–æ—Ä–æ—Ç–∫–æ–π –∫–æ–º–∞–Ω–¥–æ–π
–®–∞–≥ 1. –û—Ç–∫—Ä–æ–π .bashrc:

nano ~/.bashrc

–®–∞–≥ 2. –í —Å–∞–º—ã–π –Ω–∏–∑ –¥–æ–±–∞–≤—å:

alias startbot='cd /opt/zavodskij_alarmer && source venv/bin/activate && nohup python main.py > /dev/null 2>&1 &'
alias stopbot="ps aux | grep 'python main.py' | grep -v grep | awk '{print \$2}' | xargs kill"

–®–∞–≥ 3. –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è:

source ~/.bashrc

 –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
–ö–æ–º–∞–Ω–¥–∞	–ß—Ç–æ –¥–µ–ª–∞–µ—Ç
startbot	–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–µ
stopbot	–£–±–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å –±–æ—Ç–æ–º

################################################################################
 –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º:

–ö–æ–º–∞–Ω–¥—ã:
–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ (–µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª –∫–æ–¥):
systemctl restart zavodskij_alarmer
–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞:
systemctl stop zavodskij_alarmer
–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–Ω–æ–≤–∞:
systemctl start zavodskij_alarmer
–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å:
systemctl status zavodskij_alarmer

–°–º–æ—Ç—Ä–µ—Ç—å –≤—ã–≤–æ–¥ systemd –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (–ö–æ–≥–¥–∞ —Å–µ—Ä–≤–∏—Å –±—ã–ª –∑–∞–ø—É—â–µ–Ω / –ö–æ–≥–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω).
–í—ã–≤–æ–¥–∏—Ç –∂–∏–≤–æ–π –ª–æ–≥ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏) –æ—Ç systemd-—Å–µ—Ä–≤–∏—Å–∞ zavodskij_alarmer.
journalctl -u zavodskij_alarmer -f

–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–∫–ª—é—á—ë–Ω –ª–æ–≥ –≤ —Ñ–∞–π–ª
tail -f /opt/zavodskij_alarmer/worklog.log

"""
from datetime import datetime, timezone, timedelta

from telethon import TelegramClient, events, errors
from config import TELEGRAM_BOT_API_TOKEN, TELEGRAM_API_ID, TELEGRAM_API_HASH, PHONE_NUMBER, ALERT_GROUP_ID, MY_CHAT_ID
from getpass import getpass
import asyncio
from collections import defaultdict

# Set up logging
import logging.config

logging.config.fileConfig("logging.ini", disable_existing_loggers=False)
logger = logging.getLogger(__name__)
logging.getLogger('telethon').setLevel(logging.WARNING)

SESSION_NAME = "zavodskij_listener"
BOT_SESSION_NAME = "alertbot"

# –ö–∞–Ω–∞–ª –æ—Ç–∫—É–¥–∞ –±–µ—Ä–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ç–∞–∫–µ –Ω–∞ –ó–∞–≤–æ–¥—Å–∫–∏–π —Ä–∞–π–æ–Ω
MONITORING_CHANNELL_ID = -1002123586827
MONITORING_CHANNEL_NAME = '–ö–û–†–ê–ë–ï–õ–ò'  # For reference
# MONITORING_CHANNELL_ID = -1001144849043  # –ü–ù | –ü—Ä–µ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏.–ù–ï–¢ | –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

async def init_client():
    try:
        logger.info("Creating Telegram client...")
        client = TelegramClient(SESSION_NAME, TELEGRAM_API_ID, TELEGRAM_API_HASH)

        logger.info("Connecting to Telegram...")
        await client.connect()

        if not await client.is_user_authorized():
            logger.info("Not authorized, requesting code...")
            await client.send_code_request(PHONE_NUMBER)

            code = input("Enter the code from Telegram: ").strip()
            if not code:
                raise ValueError("Code can't be empty!")

            try:
                await client.sign_in(PHONE_NUMBER, code)
            except errors.SessionPasswordNeededError:
                password = getpass("2FA enabled. Enter your password: ").strip()
                if not password:
                    raise ValueError("Password can't be empty!")
                await client.sign_in(password=password)

        logger.info("Authorization successful ")
        me = await client.get_me()
        logger.info(f"Logged in as {me.first_name} (@{me.username or me.phone})")

        return client

    except errors.PhoneCodeInvalidError:
        logger.error(" Invalid code entered!")
        raise
    except errors.PasswordHashInvalidError:
        logger.error(" Invalid 2FA password!")
        raise
    except Exception as e:
        logger.error(f" Unexpected error: {e}")
        raise


async def init_bot():
    try:
        logger.info("Creating Telegram bot client...")
        bot = TelegramClient(BOT_SESSION_NAME, TELEGRAM_API_ID, TELEGRAM_API_HASH)

        logger.info("Starting bot...")
        await bot.start(bot_token=TELEGRAM_BOT_API_TOKEN)

        logger.info("Bot client connected ")
        return bot

    except Exception as e:
        logger.error(f" Unexpected error: {e}")
        raise


async def heartbeat(bot, chat_id):
    while True:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∏–µ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è heartbeat (UTC+3)
        kyiv_tz = timezone(timedelta(hours=3))
        now = datetime.now(kyiv_tz).strftime("%d-%m-%Y | %H:%M:%S")
        msg = f"üü¢ {now} ‚Äî –ë–æ—Ç –Ω–∞ —Å–ª—É–∂–±–µ (–ö–∏–µ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)"
        await bot.send_message(chat_id, msg)
        await asyncio.sleep(3600)  # —Ä–∞–∑ –≤ —á–∞—Å


async def get_group_name(client, group_id):
    try:
        group = await client.get_entity(group_id)
        return group.title
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –≥—Ä—É–ø–ø—ã: {e}")
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"


async def list_groups(client):
    """
    –î–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω —Ä–µ—Ü–∏–ø–∏–µ–Ω—Ç
    :param client:
    :return:
    """
    logger.info("#" * 120)
    logger.info("\n –î–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã, –≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã:\n")

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä ‚Äî —Ä–∞–±–æ—Ç–∞–µ–º —Å –Ω–∏–º —á–µ—Ä–µ–∑ async for
    async for dialog in client.iter_dialogs():
        if dialog.is_group or dialog.is_channel:
            logger.info(f" {dialog.name} ‚Äî ID: {dialog.id}")

    logger.info("\n –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n")

    # –°–ø–∏—Å–æ–∫ ‚Äî –æ–±—ã—á–Ω—ã–π for
    for dialog in await client.get_dialogs():
        entity = dialog.entity
        logger.info(f"{dialog.name} ‚Äî ID: {entity.id} ‚Äî Type: {type(entity)} ‚Äî Username: {getattr(entity, 'username', None)}")

    logger.info("#" * 120)


async def monitor_group(client, bot, keywords, monitoring_group_id, excluded_keywords=None, ballistika_keywords=None):
    """
    –§—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥—Ä—É–ø–ø—ã –Ω–∞ —Ç—Ä–µ–≤–æ–∂–Ω–æ–µ —Å–ª–æ–≤–æ
    :param client:
    :param bot:
    :param keywords:
    :param monitoring_group_id:
    :param excluded_keywords: —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–∞–µ–º—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    :return:
    """
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    setup_time = datetime.now(timezone(timedelta(hours=3)))
    logger.info(f"[SETUP] üì° –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –≤: {setup_time.strftime('%H:%M:%S.%f')[:-3]} (–ö–∏–µ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)")
    if excluded_keywords is None:
        excluded_keywords = []
    if ballistika_keywords is None:
        ballistika_keywords = []

    album_messages = defaultdict(list)

    @client.on(events.NewMessage(chats=monitoring_group_id))
    async def handler(event):
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ª–æ–≥–∏—Ä—É–µ–º –°–†–ê–ó–£ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        entry_time = datetime.now(timezone(timedelta(hours=3)))
        logger.info(f"[HANDLER_ENTRY] üöÄ –í–•–û–î –í –û–ë–†–ê–ë–û–¢–ß–ò–ö: {entry_time.strftime('%H:%M:%S.%f')[:-3]} (–ö–∏–µ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)")
        
        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∑–∞–¥–µ—Ä–∂–µ–∫
        kyiv_tz = timezone(timedelta(hours=3))  # UTC+3 –¥–ª—è –ö–∏–µ–≤–∞
        handler_start_time = datetime.now(kyiv_tz)
        message = event.message
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º UTC –≤—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∏–µ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
        message_time_kyiv = message.date.replace(tzinfo=timezone.utc).astimezone(kyiv_tz)
        
        logger.info(f"[TIMING] ‚è∞ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—â–µ–Ω –≤: {handler_start_time.strftime('%H:%M:%S.%f')[:-3]} (–ö–∏–µ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)")
        logger.info(f"[TIMING] üìÖ –í—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {message.date} (UTC) = {message_time_kyiv.strftime('%Y-%m-%d %H:%M:%S')} (–ö–∏–µ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)")
        logger.info(f"[TIMING] ‚è±Ô∏è –†–∞–∑–Ω–∏—Ü–∞: {(handler_start_time - message_time_kyiv).total_seconds():.2f} —Å–µ–∫—É–Ω–¥")

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–∏–ø–∞ join/leave/etc)
        if not hasattr(message, 'message') and not message.grouped_id:
            logger.info("[DEBUG] –°–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
            return

        grouped_id = message.grouped_id

        if grouped_id:
            album_messages[grouped_id].append(message)
            if message.message:  # –ø–æ—è–≤–∏–ª—Å—è —Ç–µ–∫—Å—Ç ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç—É —á–∞—Å—Ç—å
                logger.info(f"[DEBUG] –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–ª—å–±–æ–º–µ —Å —Ç–µ–∫—Å—Ç–æ–º. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º grouped_id={grouped_id}")
                text = message.message

                if not text.strip():
                    logger.info("[DEBUG] –¢–µ–∫—Å—Ç –≤ –∞–ª—å–±–æ–º–µ –ø—É—Å—Ç–æ–π, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º")
                    return

                # –ü–æ–∏—Å–∫ —Ç—Ä–µ–≤–æ–∂–Ω–æ–≥–æ —Å–ª–æ–≤–∞
                keyword_check_time = datetime.now(kyiv_tz)
                logger.info(f"[TIMING] üîç –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {keyword_check_time.strftime('%H:%M:%S.%f')[:-3]} (–ö–∏–µ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)")
                
                alert_triggered = False
                
                if contains_any_keyword(text, keywords):
                    logger.info(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞ {keywords} –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ (–∞–ª—å–±–æ–º). –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è...")
                    alert_triggered = True
                elif ballistika_keywords and contains_all_keywords(text, ballistika_keywords):
                    logger.info(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –í–°–ï –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ {ballistika_keywords} –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ (–∞–ª—å–±–æ–º). –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è...")
                    alert_triggered = True
                
                if alert_triggered:
                    for excluded_keyword in excluded_keywords:
                        if contains_keyword(text, excluded_keyword):
                            logger.info(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –∏—Å–∫–ª—é—á–∞–µ–º–æ–µ —Å–ª–æ–≤–æ '{excluded_keyword}' ‚Äî —Ç—Ä–µ–≤–æ–≥–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è.")
                            return

                    logger.warning("üî¥ –¢–†–ò–í–û–ì–ê!!! –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∞–ª—å–±–æ–º–∞!")
                    alert_send_time = datetime.now(kyiv_tz)
                    logger.info(f"[TIMING] üì§ –ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞: {alert_send_time.strftime('%H:%M:%S.%f')[:-3]} (–ö–∏–µ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)")
                    
                    await send_alert(bot, ALERT_GROUP_ID, text)
                    
                    alert_sent_time = datetime.now(kyiv_tz)
                    logger.info(f"[TIMING] ‚úÖ –ê–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {alert_sent_time.strftime('%H:%M:%S.%f')[:-3]} (–ö–∏–µ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)")
                    logger.info(f"[TIMING] ‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞: {(alert_sent_time - alert_send_time).total_seconds():.3f} —Å–µ–∫—É–Ω–¥")
                    logger.info("üì® –¢—Ä–µ–≤–æ–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

                # –õ–æ–≥–∏—Ä—É–µ–º
                sender = await event.get_sender()
                sender_name = getattr(sender, 'first_name', None) or getattr(sender, 'title', None) or "Unknown"
                logger.info("#" * 120)
                logger.info(f"\nüì• –ê–ª—å–±–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\nüë§ –û—Ç: {sender_name}\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:\n{text}")

                # –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞
                del album_messages[grouped_id]

        else:
            # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ –∞–ª—å–±–æ–º)
            text = message.message or getattr(message, 'text', '')
            if not text.strip():
                logger.info("[DEBUG] –ü—É—Å—Ç–æ–µ –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º")
                return

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            keyword_check_time = datetime.now(kyiv_tz)
            logger.info(f"[TIMING] üîç –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (–æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ): {keyword_check_time.strftime('%H:%M:%S.%f')[:-3]} (–ö–∏–µ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è). –Ø –ø–∏—à—É –ª–æ–≥–∏ –ø–æ –ö–∏–µ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏. –ê –≤—Ä–µ–º—è –≤ –¢–ì –ø–æ UTC, –ø–æ—ç—Ç–æ–º—É –≤—ã—à–µ –ø–æ–∫–∞–∑–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞!")
            
            alert_triggered = False
            
            if contains_any_keyword(text, keywords):
                logger.info(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞ {keywords} –≤ –æ–±—ã—á–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è...")
                alert_triggered = True
            elif ballistika_keywords and contains_all_keywords(text, ballistika_keywords):
                logger.info(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –í–°–ï –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ {ballistika_keywords} –≤ –æ–±—ã—á–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è...")
                alert_triggered = True
            
            if alert_triggered:
                for excluded_keyword in excluded_keywords:
                    if contains_keyword(text, excluded_keyword):
                        logger.info(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –∏—Å–∫–ª—é—á–∞–µ–º–æ–µ —Å–ª–æ–≤–æ '{excluded_keyword}' ‚Äî —Ç—Ä–µ–≤–æ–≥–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è.")
                        return

                logger.warning("üî¥ –¢–†–ò–í–û–ì–ê!!! –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
                alert_send_time = datetime.now(kyiv_tz)
                logger.info(f"[TIMING] üì§ –ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ (–æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ): {alert_send_time.strftime('%H:%M:%S.%f')[:-3]} (–ö–∏–µ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)")
                
                await send_alert(bot, ALERT_GROUP_ID, text)
                
                alert_sent_time = datetime.now(kyiv_tz)
                logger.info(f"[TIMING] ‚úÖ –ê–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (–æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ): {alert_sent_time.strftime('%H:%M:%S.%f')[:-3]} (–ö–∏–µ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)")
                logger.info(f"[TIMING] ‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞: {(alert_sent_time - alert_send_time).total_seconds():.3f} —Å–µ–∫—É–Ω–¥")
                logger.info("üì® –¢—Ä–µ–≤–æ–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

            # –õ–æ–≥
            sender = await event.get_sender()
            sender_name = getattr(sender, 'first_name', None) or getattr(sender, 'title', None) or "Unknown"
            logger.info("#" * 120)
            logger.info(f"\nüì• –û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\nüë§ –û—Ç: {sender_name}\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:\n{text}")

    monitoring_group_name = await get_group_name(client, monitoring_group_id)
    logger.info(f"\n –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã {monitoring_group_name} —Å ID {monitoring_group_id}... (–Ω–∞–∂–º–∏ Ctrl+C —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å)")


def contains_keyword(text: str, keyword: str) -> bool:
    return keyword.lower() in text.lower()


def contains_any_keyword(text: str, keywords: list[str]) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –ª—é–±–æ–µ –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞"""
    text_lower = text.lower()
    return any(keyword.lower() in text_lower for keyword in keywords)


def contains_all_keywords(text: str, keywords: list[str]) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –í–°–ï –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Å–ø–∏—Å–∫–∞"""
    text_lower = text.lower()
    return all(keyword.lower() in text_lower for keyword in keywords)


async def send_alert(bot, alert_group_id, alert_text):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–µ–≤–æ–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É.
    """
    text = f"\n\n{alert_text}"
    await bot.send_message(alert_group_id, text, silent=False)


async def main():
    start_time = datetime.now(timezone(timedelta(hours=3)))
    logger.info(f"[MAIN] üèÅ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: {start_time.strftime('%H:%M:%S.%f')[:-3]} (–ö–∏–µ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)")
    
    client = await init_client()
    client_ready_time = datetime.now(timezone(timedelta(hours=3)))
    logger.info(f"[MAIN] üì± –ö–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤: {client_ready_time.strftime('%H:%M:%S.%f')[:-3]} (–ö–∏–µ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)")

    bot = await init_bot()
    bot_ready_time = datetime.now(timezone(timedelta(hours=3)))
    logger.info(f"[MAIN] ü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤: {bot_ready_time.strftime('%H:%M:%S.%f')[:-3]} (–ö–∏–µ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)")

    # –¢—É—Ç —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ø–∏–Ω–≥–∞
    asyncio.create_task(heartbeat(bot, MY_CHAT_ID))

    # await list_groups(client)  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—è
    monitor_start_time = datetime.now(timezone(timedelta(hours=3)))
    logger.info(f"[MAIN] üëÇ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {monitor_start_time.strftime('%H:%M:%S.%f')[:-3]} (–ö–∏–µ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)")
    await monitor_group(client, bot, KEYWORDS, MONITORING_CHANNELL_ID, EXCLUDED_KEYWORDS, BALLISTIKA_KEYWORDS)

    logger.info(f"[MAIN] üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π...")
    await client.run_until_disconnected()


if __name__ == '__main__':
    KEYWORDS = ["–∑–∞–≤–æ–¥—Å", "—Ü–µ–Ω—Ç—Ä–∞–ª"]
    EXCLUDED_KEYWORDS = ["–∫—É–º–ø–æ–ª", "–Ω—ñ—á–æ–≥–æ –Ω–µ–º–∞"]
    BALLISTIKA_KEYWORDS = ["–ú–∏–∫–æ–ª–∞—ó–≤", "–±–∞–ª—ñ—Å—Ç–∏–∫–∞"]

    logger.info("Program starting...")

    try:
        asyncio.run(main())

    except KeyboardInterrupt:
        logger.info("Program terminated by user")
    except Exception as e:
        logger.error(f"Unexpected error: {str(e)}")
    finally:
        logger.info("Program finished")
